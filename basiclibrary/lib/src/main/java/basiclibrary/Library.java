/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;
import java.util.*;
public class Library {


    public static void main(String[] args) {

        roll(4);
        ContainsDuplicates();


    }

    public static int[] roll(int n) {
        //create the resulting array
        int[] result = new int[n];

        //get random numbers
        Random rand = new Random();

        //populate the array
        for (int i = 0; i < n; i++) {
            result[i] = rand.nextInt(6) + 1;
        }

        //return the array
        return result;
    }

    public static boolean ContainsDuplicates() {
        //iterate through the list
        int[] arr = roll(4);
        for (int i = 0; i < arr.length; i++) {
            //check if it's in the array already
            for (int j = i + 1; j < arr.length; j++) {
                //if it's in there return false
                if (arr[i] == arr[j]) {
                    return true;
                }
            }


        }
        return false;
    }

//

    public static double calculatedAverage(int[] nums) {
        double total = 0;
        for (int i = 0; i < nums.length; i++) {
            total = +total + nums[i];

        }
//        System.out.println(total);
        double average = total / nums.length;
//        System.out.println(average);
        return average;
    }

    public static double arrayOfArray(int[][] arrayOfArrays) {
        double lowestAvg = 1000;
        for (int i = 0; i < arrayOfArrays.length; i++) {
            double tempAvg = calculatedAverage(arrayOfArrays[i]);
            System.out.println("this is the average " + tempAvg);
            if (tempAvg < lowestAvg) {
                lowestAvg = tempAvg;
            }
            System.out.println("this is the lowest average " + lowestAvg);
        }
        return lowestAvg;
    }
    public static String analyzeWeatherData(int[][]arr){
        Set<Integer> distinctNumbers = new HashSet<>();
        ArrayList<Integer>newNumbers = new ArrayList<>();
        for(int[]testArr : arr) {
            for (int number : testArr) {
                newNumbers.add(number);
            }
        }
        distinctNumbers.addAll(newNumbers);

        System.out.println("this is the test weather data"
                + distinctNumbers);
        int lowNumber = 100;
        int highNumber = 0;
        for(int num : distinctNumbers){
            if(lowNumber > num){
                lowNumber = num;
            }else if(highNumber < num){
                highNumber = num;
            }
        }
        StringBuilder results = new StringBuilder("High: "
                + highNumber + "\nLow: " + lowNumber + "\n");
        for(int i = lowNumber; i <= highNumber; i++){
            if (!distinctNumbers.contains(i)){
                System.out.println("this number is not there " + i);
                results.append("Never saw temperature: " + i + "\n");
            }
        }
        System.out.println(results.toString());
        String resultsString = results.toString();

        return resultsString;
    }

    public static String tallyElection(List<String> list){
        Set<String> distinctElements = new HashSet<>();
        distinctElements.addAll(list);
        HashMap<String, Integer>votesForEach = new HashMap<>();
        for(String element : distinctElements){
            votesForEach.put(element,0 );
        }
        int mostVotes = 0;
        String winner = "";
        for(String element : list){
            int counter = votesForEach.get(element);
            counter++;
            votesForEach.put(element, counter);
            if(counter > mostVotes){
                mostVotes = counter;
                winner = element;

            }
        }
        System.out.println(winner + " received the most votes!");
        System.out.println(mostVotes);
        System.out.println(votesForEach.values());
        System.out.println(list);
        System.out.println(distinctElements);
        System.out.println(votesForEach);


        return winner + " received the most votes!";
    }

}